{"ast":null,"code":"import { focusSafely as $6a99195332edec8b$export$80f3e147d781571c } from \"./focusSafely.mjs\";\nimport { isElementVisible as $645f2e67b85a24c9$export$e989c0fffaa6b27a } from \"./isElementVisible.mjs\";\nimport { useLayoutEffect as $cgawC$useLayoutEffect, getOwnerDocument as $cgawC$getOwnerDocument } from \"@react-aria/utils\";\nimport $cgawC$react, { useRef as $cgawC$useRef, useContext as $cgawC$useContext, useMemo as $cgawC$useMemo, useEffect as $cgawC$useEffect } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $9bf71ea28793e738$var$FocusContext = /*#__PURE__*/(0, $cgawC$react).createContext(null);\nconst $9bf71ea28793e738$var$RESTORE_FOCUS_EVENT = 'react-aria-focus-scope-restore';\nlet $9bf71ea28793e738$var$activeScope = null;\nfunction $9bf71ea28793e738$export$20e40289641fbbb6(props) {\n  let {\n    children: children,\n    contain: contain,\n    restoreFocus: restoreFocus,\n    autoFocus: autoFocus\n  } = props;\n  let startRef = (0, $cgawC$useRef)(null);\n  let endRef = (0, $cgawC$useRef)(null);\n  let scopeRef = (0, $cgawC$useRef)([]);\n  let {\n    parentNode: parentNode\n  } = (0, $cgawC$useContext)($9bf71ea28793e738$var$FocusContext) || {};\n  // Create a tree node here so we can add children to it even before it is added to the tree.\n  let node = (0, $cgawC$useMemo)(() => new $9bf71ea28793e738$var$TreeNode({\n    scopeRef: scopeRef\n  }), [scopeRef]);\n  (0, $cgawC$useLayoutEffect)(() => {\n    // If a new scope mounts outside the active scope, (e.g. DialogContainer launched from a menu),\n    // use the active scope as the parent instead of the parent from context. Layout effects run bottom\n    // up, so if the parent is not yet added to the tree, don't do this. Only the outer-most FocusScope\n    // that is being added should get the activeScope as its parent.\n    let parent = parentNode || $9bf71ea28793e738$export$d06fae2ee68b101e.root;\n    if ($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parent.scopeRef) && $9bf71ea28793e738$var$activeScope && !$9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, parent.scopeRef)) {\n      let activeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);\n      if (activeNode) parent = activeNode;\n    }\n    // Add the node to the parent, and to the tree.\n    parent.addChild(node);\n    $9bf71ea28793e738$export$d06fae2ee68b101e.addNode(node);\n  }, [node, parentNode]);\n  (0, $cgawC$useLayoutEffect)(() => {\n    let node = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);\n    if (node) node.contain = !!contain;\n  }, [contain]);\n  (0, $cgawC$useLayoutEffect)(() => {\n    var _startRef_current;\n    // Find all rendered nodes between the sentinels and add them to the scope.\n    let node = (_startRef_current = startRef.current) === null || _startRef_current === void 0 ? void 0 : _startRef_current.nextSibling;\n    let nodes = [];\n    let stopPropagation = e => e.stopPropagation();\n    while (node && node !== endRef.current) {\n      nodes.push(node);\n      // Stop custom restore focus event from propagating to parent focus scopes.\n      node.addEventListener($9bf71ea28793e738$var$RESTORE_FOCUS_EVENT, stopPropagation);\n      node = node.nextSibling;\n    }\n    scopeRef.current = nodes;\n    return () => {\n      for (let node of nodes) node.removeEventListener($9bf71ea28793e738$var$RESTORE_FOCUS_EVENT, stopPropagation);\n    };\n  }, [children]);\n  $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restoreFocus, contain);\n  $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain);\n  $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain);\n  $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus);\n  // This needs to be an effect so that activeScope is updated after the FocusScope tree is complete.\n  // It cannot be a useLayoutEffect because the parent of this node hasn't been attached in the tree yet.\n  (0, $cgawC$useEffect)(() => {\n    const activeElement = (0, $cgawC$getOwnerDocument)(scopeRef.current ? scopeRef.current[0] : undefined).activeElement;\n    let scope = null;\n    if ($9bf71ea28793e738$var$isElementInScope(activeElement, scopeRef.current)) {\n      // We need to traverse the focusScope tree and find the bottom most scope that\n      // contains the active element and set that as the activeScope.\n      for (let node of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse()) if (node.scopeRef && $9bf71ea28793e738$var$isElementInScope(activeElement, node.scopeRef.current)) scope = node;\n      if (scope === $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef)) $9bf71ea28793e738$var$activeScope = scope.scopeRef;\n    }\n  }, [scopeRef]);\n  // This layout effect cleanup is so that the tree node is removed synchronously with react before the RAF\n  // in useRestoreFocus cleanup runs.\n  (0, $cgawC$useLayoutEffect)(() => {\n    return () => {\n      var _focusScopeTree_getTreeNode_parent, _focusScopeTree_getTreeNode;\n      var _focusScopeTree_getTreeNode_parent_scopeRef;\n      // Scope may have been re-parented.\n      let parentScope = (_focusScopeTree_getTreeNode_parent_scopeRef = (_focusScopeTree_getTreeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : (_focusScopeTree_getTreeNode_parent = _focusScopeTree_getTreeNode.parent) === null || _focusScopeTree_getTreeNode_parent === void 0 ? void 0 : _focusScopeTree_getTreeNode_parent.scopeRef) !== null && _focusScopeTree_getTreeNode_parent_scopeRef !== void 0 ? _focusScopeTree_getTreeNode_parent_scopeRef : null;\n      if ((scopeRef === $9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope(scopeRef, $9bf71ea28793e738$var$activeScope)) && (!parentScope || $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parentScope))) $9bf71ea28793e738$var$activeScope = parentScope;\n      $9bf71ea28793e738$export$d06fae2ee68b101e.removeTreeNode(scopeRef);\n    };\n  }, [scopeRef]);\n  let focusManager = (0, $cgawC$useMemo)(() => $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef), []);\n  let value = (0, $cgawC$useMemo)(() => ({\n    focusManager: focusManager,\n    parentNode: node\n  }), [node, focusManager]);\n  return /*#__PURE__*/(0, $cgawC$react).createElement($9bf71ea28793e738$var$FocusContext.Provider, {\n    value: value\n  }, /*#__PURE__*/(0, $cgawC$react).createElement(\"span\", {\n    \"data-focus-scope-start\": true,\n    hidden: true,\n    ref: startRef\n  }), children, /*#__PURE__*/(0, $cgawC$react).createElement(\"span\", {\n    \"data-focus-scope-end\": true,\n    hidden: true,\n    ref: endRef\n  }));\n}\nfunction $9bf71ea28793e738$export$10c5169755ce7bd7() {\n  var _useContext;\n  return (_useContext = (0, $cgawC$useContext)($9bf71ea28793e738$var$FocusContext)) === null || _useContext === void 0 ? void 0 : _useContext.focusManager;\n}\nfunction $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef) {\n  return {\n    focusNext(opts = {}) {\n      let scope = scopeRef.current;\n      let {\n        from: from,\n        tabbable: tabbable,\n        wrap: wrap,\n        accept: accept\n      } = opts;\n      let node = from || (0, $cgawC$getOwnerDocument)(scope[0]).activeElement;\n      let sentinel = scope[0].previousElementSibling;\n      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;\n      let nextNode = walker.nextNode();\n      if (!nextNode && wrap) {\n        walker.currentNode = sentinel;\n        nextNode = walker.nextNode();\n      }\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n    focusPrevious(opts = {}) {\n      let scope = scopeRef.current;\n      let {\n        from: from,\n        tabbable: tabbable,\n        wrap: wrap,\n        accept: accept\n      } = opts;\n      let node = from || (0, $cgawC$getOwnerDocument)(scope[0]).activeElement;\n      let sentinel = scope[scope.length - 1].nextElementSibling;\n      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;\n      let previousNode = walker.previousNode();\n      if (!previousNode && wrap) {\n        walker.currentNode = sentinel;\n        previousNode = walker.previousNode();\n      }\n      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n      return previousNode;\n    },\n    focusFirst(opts = {}) {\n      let scope = scopeRef.current;\n      let {\n        tabbable: tabbable,\n        accept: accept\n      } = opts;\n      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = scope[0].previousElementSibling;\n      let nextNode = walker.nextNode();\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n    focusLast(opts = {}) {\n      let scope = scopeRef.current;\n      let {\n        tabbable: tabbable,\n        accept: accept\n      } = opts;\n      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = scope[scope.length - 1].nextElementSibling;\n      let previousNode = walker.previousNode();\n      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n      return previousNode;\n    }\n  };\n}\nconst $9bf71ea28793e738$var$focusableElements = ['input:not([disabled]):not([type=hidden])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'a[href]', 'area[href]', 'summary', 'iframe', 'object', 'embed', 'audio[controls]', 'video[controls]', '[contenteditable]'];\nconst $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(':not([hidden]),') + ',[tabindex]:not([disabled]):not([hidden])';\n$9bf71ea28793e738$var$focusableElements.push('[tabindex]:not([tabindex=\"-1\"]):not([disabled])');\nconst $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(':not([hidden]):not([tabindex=\"-1\"]),');\nfunction $9bf71ea28793e738$export$4c063cf1350e6fed(element) {\n  return element.matches($9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR);\n}\nfunction $9bf71ea28793e738$var$getScopeRoot(scope) {\n  return scope[0].parentElement;\n}\nfunction $9bf71ea28793e738$var$shouldContainFocus(scopeRef) {\n  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.contain) return false;\n    scope = scope.parent;\n  }\n  return true;\n}\nfunction $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain) {\n  let focusedNode = (0, $cgawC$useRef)(undefined);\n  let raf = (0, $cgawC$useRef)(undefined);\n  (0, $cgawC$useLayoutEffect)(() => {\n    let scope = scopeRef.current;\n    if (!contain) {\n      // if contain was changed, then we should cancel any ongoing waits to pull focus back into containment\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n        raf.current = undefined;\n      }\n      return;\n    }\n    const ownerDocument = (0, $cgawC$getOwnerDocument)(scope ? scope[0] : undefined);\n    // Handle the Tab key to contain focus within the scope\n    let onKeyDown = e => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef) || e.isComposing) return;\n      let focusedElement = ownerDocument.activeElement;\n      let scope = scopeRef.current;\n      if (!scope || !$9bf71ea28793e738$var$isElementInScope(focusedElement, scope)) return;\n      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n        tabbable: true\n      }, scope);\n      if (!focusedElement) return;\n      walker.currentNode = focusedElement;\n      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n      if (!nextElement) {\n        walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;\n        nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n      }\n      e.preventDefault();\n      if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);\n    };\n    let onFocus = e => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope(e.target, scopeRef.current)) {\n        $9bf71ea28793e738$var$activeScope = scopeRef;\n        focusedNode.current = e.target;\n      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(e.target, scopeRef)) {\n        // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),\n        // restore focus to the previously focused node or the first tabbable element in the active scope.\n        if (focusedNode.current) focusedNode.current.focus();else if ($9bf71ea28793e738$var$activeScope && $9bf71ea28793e738$var$activeScope.current) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);\n      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef)) focusedNode.current = e.target;\n    };\n    let onBlur = e => {\n      // Firefox doesn't shift focus back to the Dialog properly without this\n      if (raf.current) cancelAnimationFrame(raf.current);\n      raf.current = requestAnimationFrame(() => {\n        // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe\n        if (ownerDocument.activeElement && $9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(ownerDocument.activeElement, scopeRef)) {\n          $9bf71ea28793e738$var$activeScope = scopeRef;\n          if (ownerDocument.body.contains(e.target)) {\n            var _focusedNode_current;\n            focusedNode.current = e.target;\n            (_focusedNode_current = focusedNode.current) === null || _focusedNode_current === void 0 ? void 0 : _focusedNode_current.focus();\n          } else if ($9bf71ea28793e738$var$activeScope.current) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);\n        }\n      });\n    };\n    ownerDocument.addEventListener('keydown', onKeyDown, false);\n    ownerDocument.addEventListener('focusin', onFocus, false);\n    scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.addEventListener('focusout', onBlur, false));\n    return () => {\n      ownerDocument.removeEventListener('keydown', onKeyDown, false);\n      ownerDocument.removeEventListener('focusin', onFocus, false);\n      scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n      scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.removeEventListener('focusout', onBlur, false));\n    };\n  }, [scopeRef, contain]);\n  // This is a useLayoutEffect so it is guaranteed to run before our async synthetic blur\n  // eslint-disable-next-line arrow-body-style\n  (0, $cgawC$useLayoutEffect)(() => {\n    return () => {\n      if (raf.current) cancelAnimationFrame(raf.current);\n    };\n  }, [raf]);\n}\nfunction $9bf71ea28793e738$var$isElementInAnyScope(element) {\n  return $9bf71ea28793e738$var$isElementInChildScope(element);\n}\nfunction $9bf71ea28793e738$var$isElementInScope(element, scope) {\n  if (!element) return false;\n  if (!scope) return false;\n  return scope.some(node => node.contains(element));\n}\nfunction $9bf71ea28793e738$var$isElementInChildScope(element, scope = null) {\n  // If the element is within a top layer element (e.g. toasts), always allow moving focus there.\n  if (element instanceof Element && element.closest('[data-react-aria-top-layer]')) return true;\n  // node.contains in isElementInScope covers child scopes that are also DOM children,\n  // but does not cover child scopes in portals.\n  for (let {\n    scopeRef: s\n  } of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope))) {\n    if (s && $9bf71ea28793e738$var$isElementInScope(element, s.current)) return true;\n  }\n  return false;\n}\nfunction $9bf71ea28793e738$export$1258395f99bf9cbf(element) {\n  return $9bf71ea28793e738$var$isElementInChildScope(element, $9bf71ea28793e738$var$activeScope);\n}\nfunction $9bf71ea28793e738$var$isAncestorScope(ancestor, scope) {\n  var _focusScopeTree_getTreeNode;\n  let parent = (_focusScopeTree_getTreeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : _focusScopeTree_getTreeNode.parent;\n  while (parent) {\n    if (parent.scopeRef === ancestor) return true;\n    parent = parent.parent;\n  }\n  return false;\n}\nfunction $9bf71ea28793e738$var$focusElement(element, scroll = false) {\n  if (element != null && !scroll) try {\n    (0, $6a99195332edec8b$export$80f3e147d781571c)(element);\n  } catch (err) {\n    // ignore\n  } else if (element != null) try {\n    element.focus();\n  } catch (err) {\n    // ignore\n  }\n}\nfunction $9bf71ea28793e738$var$getFirstInScope(scope, tabbable = true) {\n  let sentinel = scope[0].previousElementSibling;\n  let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n  let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n    tabbable: tabbable\n  }, scope);\n  walker.currentNode = sentinel;\n  let nextNode = walker.nextNode();\n  // If the scope does not contain a tabbable element, use the first focusable element.\n  if (tabbable && !nextNode) {\n    scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n    walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n      tabbable: false\n    }, scope);\n    walker.currentNode = sentinel;\n    nextNode = walker.nextNode();\n  }\n  return nextNode;\n}\nfunction $9bf71ea28793e738$var$focusFirstInScope(scope, tabbable = true) {\n  $9bf71ea28793e738$var$focusElement($9bf71ea28793e738$var$getFirstInScope(scope, tabbable));\n}\nfunction $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus) {\n  const autoFocusRef = (0, $cgawC$react).useRef(autoFocus);\n  (0, $cgawC$useEffect)(() => {\n    if (autoFocusRef.current) {\n      $9bf71ea28793e738$var$activeScope = scopeRef;\n      const ownerDocument = (0, $cgawC$getOwnerDocument)(scopeRef.current ? scopeRef.current[0] : undefined);\n      if (!$9bf71ea28793e738$var$isElementInScope(ownerDocument.activeElement, $9bf71ea28793e738$var$activeScope.current) && scopeRef.current) $9bf71ea28793e738$var$focusFirstInScope(scopeRef.current);\n    }\n    autoFocusRef.current = false;\n  }, [scopeRef]);\n}\nfunction $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restore, contain) {\n  // tracks the active scope, in case restore and contain are both false.\n  // if either are true, this is tracked in useRestoreFocus or useFocusContainment.\n  (0, $cgawC$useLayoutEffect)(() => {\n    if (restore || contain) return;\n    let scope = scopeRef.current;\n    const ownerDocument = (0, $cgawC$getOwnerDocument)(scope ? scope[0] : undefined);\n    let onFocus = e => {\n      let target = e.target;\n      if ($9bf71ea28793e738$var$isElementInScope(target, scopeRef.current)) $9bf71ea28793e738$var$activeScope = scopeRef;else if (!$9bf71ea28793e738$var$isElementInAnyScope(target)) $9bf71ea28793e738$var$activeScope = null;\n    };\n    ownerDocument.addEventListener('focusin', onFocus, false);\n    scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    return () => {\n      ownerDocument.removeEventListener('focusin', onFocus, false);\n      scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n    };\n  }, [scopeRef, restore, contain]);\n}\nfunction $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef) {\n  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.nodeToRestore) return false;\n    scope = scope.parent;\n  }\n  return (scope === null || scope === void 0 ? void 0 : scope.scopeRef) === scopeRef;\n}\nfunction $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain) {\n  // create a ref during render instead of useLayoutEffect so the active element is saved before a child with autoFocus=true mounts.\n  // eslint-disable-next-line no-restricted-globals\n  const nodeToRestoreRef = (0, $cgawC$useRef)(typeof document !== 'undefined' ? (0, $cgawC$getOwnerDocument)(scopeRef.current ? scopeRef.current[0] : undefined).activeElement : null);\n  // restoring scopes should all track if they are active regardless of contain, but contain already tracks it plus logic to contain the focus\n  // restoring-non-containing scopes should only care if they become active so they can perform the restore\n  (0, $cgawC$useLayoutEffect)(() => {\n    let scope = scopeRef.current;\n    const ownerDocument = (0, $cgawC$getOwnerDocument)(scope ? scope[0] : undefined);\n    if (!restoreFocus || contain) return;\n    let onFocus = () => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope(ownerDocument.activeElement, scopeRef.current)) $9bf71ea28793e738$var$activeScope = scopeRef;\n    };\n    ownerDocument.addEventListener('focusin', onFocus, false);\n    scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    return () => {\n      ownerDocument.removeEventListener('focusin', onFocus, false);\n      scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [scopeRef, contain]);\n  (0, $cgawC$useLayoutEffect)(() => {\n    const ownerDocument = (0, $cgawC$getOwnerDocument)(scopeRef.current ? scopeRef.current[0] : undefined);\n    if (!restoreFocus) return;\n    // Handle the Tab key so that tabbing out of the scope goes to the next element\n    // after the node that had focus when the scope mounted. This is important when\n    // using portals for overlays, so that focus goes to the expected element when\n    // tabbing out of the overlay.\n    let onKeyDown = e => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef) || e.isComposing) return;\n      let focusedElement = ownerDocument.activeElement;\n      if (!$9bf71ea28793e738$var$isElementInScope(focusedElement, scopeRef.current)) return;\n      let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);\n      if (!treeNode) return;\n      let nodeToRestore = treeNode.nodeToRestore;\n      // Create a DOM tree walker that matches all tabbable elements\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(ownerDocument.body, {\n        tabbable: true\n      });\n      // Find the next tabbable element after the currently focused element\n      walker.currentNode = focusedElement;\n      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n      if (!nodeToRestore || !ownerDocument.body.contains(nodeToRestore) || nodeToRestore === ownerDocument.body) {\n        nodeToRestore = undefined;\n        treeNode.nodeToRestore = undefined;\n      }\n      // If there is no next element, or it is outside the current scope, move focus to the\n      // next element after the node to restore to instead.\n      if ((!nextElement || !$9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {\n        walker.currentNode = nodeToRestore;\n        // Skip over elements within the scope, in case the scope immediately follows the node to restore.\n        do nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode(); while ($9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current));\n        e.preventDefault();\n        e.stopPropagation();\n        if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);else\n          // If there is no next element and the nodeToRestore isn't within a FocusScope (i.e. we are leaving the top level focus scope)\n          // then move focus to the body.\n          // Otherwise restore focus to the nodeToRestore (e.g menu within a popover -> tabbing to close the menu should move focus to menu trigger)\n          if (!$9bf71ea28793e738$var$isElementInAnyScope(nodeToRestore)) focusedElement.blur();else $9bf71ea28793e738$var$focusElement(nodeToRestore, true);\n      }\n    };\n    if (!contain) ownerDocument.addEventListener('keydown', onKeyDown, true);\n    return () => {\n      if (!contain) ownerDocument.removeEventListener('keydown', onKeyDown, true);\n    };\n  }, [scopeRef, restoreFocus, contain]);\n  // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.\n  (0, $cgawC$useLayoutEffect)(() => {\n    const ownerDocument = (0, $cgawC$getOwnerDocument)(scopeRef.current ? scopeRef.current[0] : undefined);\n    if (!restoreFocus) return;\n    let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);\n    if (!treeNode) return;\n    var _nodeToRestoreRef_current;\n    treeNode.nodeToRestore = (_nodeToRestoreRef_current = nodeToRestoreRef.current) !== null && _nodeToRestoreRef_current !== void 0 ? _nodeToRestoreRef_current : undefined;\n    return () => {\n      let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);\n      if (!treeNode) return;\n      let nodeToRestore = treeNode.nodeToRestore;\n      // if we already lost focus to the body and this was the active scope, then we should attempt to restore\n      if (restoreFocus && nodeToRestore && (\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      $9bf71ea28793e738$var$isElementInScope(ownerDocument.activeElement, scopeRef.current) || ownerDocument.activeElement === ownerDocument.body && $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef))) {\n        // freeze the focusScopeTree so it persists after the raf, otherwise during unmount nodes are removed from it\n        let clonedTree = $9bf71ea28793e738$export$d06fae2ee68b101e.clone();\n        requestAnimationFrame(() => {\n          // Only restore focus if we've lost focus to the body, the alternative is that focus has been purposefully moved elsewhere\n          if (ownerDocument.activeElement === ownerDocument.body) {\n            // look up the tree starting with our scope to find a nodeToRestore still in the DOM\n            let treeNode = clonedTree.getTreeNode(scopeRef);\n            while (treeNode) {\n              if (treeNode.nodeToRestore && treeNode.nodeToRestore.isConnected) {\n                $9bf71ea28793e738$var$restoreFocusToElement(treeNode.nodeToRestore);\n                return;\n              }\n              treeNode = treeNode.parent;\n            }\n            // If no nodeToRestore was found, focus the first element in the nearest\n            // ancestor scope that is still in the tree.\n            treeNode = clonedTree.getTreeNode(scopeRef);\n            while (treeNode) {\n              if (treeNode.scopeRef && treeNode.scopeRef.current && $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(treeNode.scopeRef)) {\n                let node = $9bf71ea28793e738$var$getFirstInScope(treeNode.scopeRef.current, true);\n                $9bf71ea28793e738$var$restoreFocusToElement(node);\n                return;\n              }\n              treeNode = treeNode.parent;\n            }\n          }\n        });\n      }\n    };\n  }, [scopeRef, restoreFocus]);\n}\nfunction $9bf71ea28793e738$var$restoreFocusToElement(node) {\n  // Dispatch a custom event that parent elements can intercept to customize focus restoration.\n  // For example, virtualized collection components reuse DOM elements, so the original element\n  // might still exist in the DOM but representing a different item.\n  if (node.dispatchEvent(new CustomEvent($9bf71ea28793e738$var$RESTORE_FOCUS_EVENT, {\n    bubbles: true,\n    cancelable: true\n  }))) $9bf71ea28793e738$var$focusElement(node);\n}\nfunction $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, opts, scope) {\n  let selector = (opts === null || opts === void 0 ? void 0 : opts.tabbable) ? $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR : $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR;\n  let walker = (0, $cgawC$getOwnerDocument)(root).createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {\n    acceptNode(node) {\n      var _opts_from;\n      // Skip nodes inside the starting node.\n      if (opts === null || opts === void 0 ? void 0 : (_opts_from = opts.from) === null || _opts_from === void 0 ? void 0 : _opts_from.contains(node)) return NodeFilter.FILTER_REJECT;\n      if (node.matches(selector) && (0, $645f2e67b85a24c9$export$e989c0fffaa6b27a)(node) && (!scope || $9bf71ea28793e738$var$isElementInScope(node, scope)) && (!(opts === null || opts === void 0 ? void 0 : opts.accept) || opts.accept(node))) return NodeFilter.FILTER_ACCEPT;\n      return NodeFilter.FILTER_SKIP;\n    }\n  });\n  if (opts === null || opts === void 0 ? void 0 : opts.from) walker.currentNode = opts.from;\n  return walker;\n}\nfunction $9bf71ea28793e738$export$c5251b9e124bf29(ref, defaultOptions = {}) {\n  return {\n    focusNext(opts = {}) {\n      let root = ref.current;\n      if (!root) return null;\n      let {\n        from: from,\n        tabbable = defaultOptions.tabbable,\n        wrap = defaultOptions.wrap,\n        accept = defaultOptions.accept\n      } = opts;\n      let node = from || (0, $cgawC$getOwnerDocument)(root).activeElement;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      if (root.contains(node)) walker.currentNode = node;\n      let nextNode = walker.nextNode();\n      if (!nextNode && wrap) {\n        walker.currentNode = root;\n        nextNode = walker.nextNode();\n      }\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n    focusPrevious(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) return null;\n      let {\n        from: from,\n        tabbable = defaultOptions.tabbable,\n        wrap = defaultOptions.wrap,\n        accept = defaultOptions.accept\n      } = opts;\n      let node = from || (0, $cgawC$getOwnerDocument)(root).activeElement;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      if (root.contains(node)) walker.currentNode = node;else {\n        let next = $9bf71ea28793e738$var$last(walker);\n        if (next) $9bf71ea28793e738$var$focusElement(next, true);\n        return next !== null && next !== void 0 ? next : null;\n      }\n      let previousNode = walker.previousNode();\n      if (!previousNode && wrap) {\n        walker.currentNode = root;\n        let lastNode = $9bf71ea28793e738$var$last(walker);\n        if (!lastNode)\n          // couldn't wrap\n          return null;\n        previousNode = lastNode;\n      }\n      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n      return previousNode !== null && previousNode !== void 0 ? previousNode : null;\n    },\n    focusFirst(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) return null;\n      let {\n        tabbable = defaultOptions.tabbable,\n        accept = defaultOptions.accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      let nextNode = walker.nextNode();\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n    focusLast(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) return null;\n      let {\n        tabbable = defaultOptions.tabbable,\n        accept = defaultOptions.accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      let next = $9bf71ea28793e738$var$last(walker);\n      if (next) $9bf71ea28793e738$var$focusElement(next, true);\n      return next !== null && next !== void 0 ? next : null;\n    }\n  };\n}\nfunction $9bf71ea28793e738$var$last(walker) {\n  let next = undefined;\n  let last;\n  do {\n    last = walker.lastChild();\n    if (last) next = last;\n  } while (last);\n  return next;\n}\nclass $9bf71ea28793e738$var$Tree {\n  get size() {\n    return this.fastMap.size;\n  }\n  getTreeNode(data) {\n    return this.fastMap.get(data);\n  }\n  addTreeNode(scopeRef, parent, nodeToRestore) {\n    let parentNode = this.fastMap.get(parent !== null && parent !== void 0 ? parent : null);\n    if (!parentNode) return;\n    let node = new $9bf71ea28793e738$var$TreeNode({\n      scopeRef: scopeRef\n    });\n    parentNode.addChild(node);\n    node.parent = parentNode;\n    this.fastMap.set(scopeRef, node);\n    if (nodeToRestore) node.nodeToRestore = nodeToRestore;\n  }\n  addNode(node) {\n    this.fastMap.set(node.scopeRef, node);\n  }\n  removeTreeNode(scopeRef) {\n    // never remove the root\n    if (scopeRef === null) return;\n    let node = this.fastMap.get(scopeRef);\n    if (!node) return;\n    let parentNode = node.parent;\n    // when we remove a scope, check if any sibling scopes are trying to restore focus to something inside the scope we're removing\n    // if we are, then replace the siblings restore with the restore from the scope we're removing\n    for (let current of this.traverse()) if (current !== node && node.nodeToRestore && current.nodeToRestore && node.scopeRef && node.scopeRef.current && $9bf71ea28793e738$var$isElementInScope(current.nodeToRestore, node.scopeRef.current)) current.nodeToRestore = node.nodeToRestore;\n    let children = node.children;\n    if (parentNode) {\n      parentNode.removeChild(node);\n      if (children.size > 0) children.forEach(child => parentNode && parentNode.addChild(child));\n    }\n    this.fastMap.delete(node.scopeRef);\n  }\n  // Pre Order Depth First\n  *traverse(node = this.root) {\n    if (node.scopeRef != null) yield node;\n    if (node.children.size > 0) for (let child of node.children) yield* this.traverse(child);\n  }\n  clone() {\n    var _node_parent;\n    let newTree = new $9bf71ea28793e738$var$Tree();\n    var _node_parent_scopeRef;\n    for (let node of this.traverse()) newTree.addTreeNode(node.scopeRef, (_node_parent_scopeRef = (_node_parent = node.parent) === null || _node_parent === void 0 ? void 0 : _node_parent.scopeRef) !== null && _node_parent_scopeRef !== void 0 ? _node_parent_scopeRef : null, node.nodeToRestore);\n    return newTree;\n  }\n  constructor() {\n    this.fastMap = new Map();\n    this.root = new $9bf71ea28793e738$var$TreeNode({\n      scopeRef: null\n    });\n    this.fastMap.set(null, this.root);\n  }\n}\nclass $9bf71ea28793e738$var$TreeNode {\n  addChild(node) {\n    this.children.add(node);\n    node.parent = this;\n  }\n  removeChild(node) {\n    this.children.delete(node);\n    node.parent = undefined;\n  }\n  constructor(props) {\n    this.children = new Set();\n    this.contain = false;\n    this.scopeRef = props.scopeRef;\n  }\n}\nlet $9bf71ea28793e738$export$d06fae2ee68b101e = new $9bf71ea28793e738$var$Tree();\nexport { $9bf71ea28793e738$export$20e40289641fbbb6 as FocusScope, $9bf71ea28793e738$export$d06fae2ee68b101e as focusScopeTree, $9bf71ea28793e738$export$10c5169755ce7bd7 as useFocusManager, $9bf71ea28793e738$export$2d6ec8fc375ceafa as getFocusableTreeWalker, $9bf71ea28793e738$export$4c063cf1350e6fed as isFocusable, $9bf71ea28793e738$export$1258395f99bf9cbf as isElementInChildOfActiveScope, $9bf71ea28793e738$export$c5251b9e124bf29 as createFocusManager };","map":{"version":3,"names":["$9bf71ea28793e738$var$FocusContext","$cgawC$react","createContext","$9bf71ea28793e738$var$RESTORE_FOCUS_EVENT","$9bf71ea28793e738$var$activeScope","$9bf71ea28793e738$export$20e40289641fbbb6","props","children","contain","restoreFocus","autoFocus","startRef","$cgawC$useRef","endRef","scopeRef","parentNode","$cgawC$useContext","node","$cgawC$useMemo","$9bf71ea28793e738$var$TreeNode","$cgawC$useLayoutEffect","parent","$9bf71ea28793e738$export$d06fae2ee68b101e","root","getTreeNode","$9bf71ea28793e738$var$isAncestorScope","activeNode","addChild","addNode","_startRef_current","current","nextSibling","nodes","stopPropagation","e","push","addEventListener","removeEventListener","$9bf71ea28793e738$var$useActiveScopeTracker","$9bf71ea28793e738$var$useFocusContainment","$9bf71ea28793e738$var$useRestoreFocus","$9bf71ea28793e738$var$useAutoFocus","$cgawC$useEffect","activeElement","$cgawC$getOwnerDocument","undefined","scope","$9bf71ea28793e738$var$isElementInScope","traverse","_focusScopeTree_getTreeNode_parent","_focusScopeTree_getTreeNode","_focusScopeTree_getTreeNode_parent_scopeRef","parentScope","removeTreeNode","focusManager","$9bf71ea28793e738$var$createFocusManagerForScope","value","createElement","Provider","hidden","ref","$9bf71ea28793e738$export$10c5169755ce7bd7","_useContext","focusNext","opts","from","tabbable","wrap","accept","sentinel","previousElementSibling","scopeRoot","$9bf71ea28793e738$var$getScopeRoot","walker","$9bf71ea28793e738$export$2d6ec8fc375ceafa","currentNode","nextNode","$9bf71ea28793e738$var$focusElement","focusPrevious","length","nextElementSibling","previousNode","focusFirst","focusLast","$9bf71ea28793e738$var$focusableElements","$9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR","join","$9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR","$9bf71ea28793e738$export$4c063cf1350e6fed","element","matches","parentElement","$9bf71ea28793e738$var$shouldContainFocus","focusedNode","raf","cancelAnimationFrame","ownerDocument","onKeyDown","key","altKey","ctrlKey","metaKey","isComposing","focusedElement","nextElement","shiftKey","preventDefault","onFocus","target","$9bf71ea28793e738$var$isElementInChildScope","focus","$9bf71ea28793e738$var$focusFirstInScope","onBlur","requestAnimationFrame","body","contains","_focusedNode_current","forEach","$9bf71ea28793e738$var$isElementInAnyScope","some","Element","closest","s","$9bf71ea28793e738$export$1258395f99bf9cbf","ancestor","scroll","$6a99195332edec8b$export$80f3e147d781571c","err","$9bf71ea28793e738$var$getFirstInScope","autoFocusRef","useRef","restore","$9bf71ea28793e738$var$shouldRestoreFocus","nodeToRestore","nodeToRestoreRef","document","treeNode","blur","_nodeToRestoreRef_current","clonedTree","clone","isConnected","$9bf71ea28793e738$var$restoreFocusToElement","dispatchEvent","CustomEvent","bubbles","cancelable","selector","createTreeWalker","NodeFilter","SHOW_ELEMENT","acceptNode","_opts_from","FILTER_REJECT","$645f2e67b85a24c9$export$e989c0fffaa6b27a","FILTER_ACCEPT","FILTER_SKIP","$9bf71ea28793e738$export$c5251b9e124bf29","defaultOptions","next","$9bf71ea28793e738$var$last","lastNode","last","lastChild","$9bf71ea28793e738$var$Tree","size","fastMap","data","get","addTreeNode","set","removeChild","child","delete","_node_parent","newTree","_node_parent_scopeRef","constructor","Map","add","Set"],"sources":["C:\\Users\\PC\\Desktop\\MOVIE-WEB\\node_modules\\@react-aria\\focus\\dist\\packages\\@react-aria\\focus\\src\\FocusScope.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement, RefObject} from '@react-types/shared';\nimport {focusSafely} from './focusSafely';\nimport {getOwnerDocument, useLayoutEffect} from '@react-aria/utils';\nimport {isElementVisible} from './isElementVisible';\nimport React, {ReactNode, useContext, useEffect, useMemo, useRef} from 'react';\n\nexport interface FocusScopeProps {\n  /** The contents of the focus scope. */\n  children: ReactNode,\n\n  /**\n   * Whether to contain focus inside the scope, so users cannot\n   * move focus outside, for example in a modal dialog.\n   */\n  contain?: boolean,\n\n  /**\n   * Whether to restore focus back to the element that was focused\n   * when the focus scope mounted, after the focus scope unmounts.\n   */\n  restoreFocus?: boolean,\n\n  /** Whether to auto focus the first focusable element in the focus scope on mount. */\n  autoFocus?: boolean\n}\n\nexport interface FocusManagerOptions {\n  /** The element to start searching from. The currently focused element by default. */\n  from?: Element,\n  /** Whether to only include tabbable elements, or all focusable elements. */\n  tabbable?: boolean,\n  /** Whether focus should wrap around when it reaches the end of the scope. */\n  wrap?: boolean,\n  /** A callback that determines whether the given element is focused. */\n  accept?: (node: Element) => boolean\n}\n\nexport interface FocusManager {\n  /** Moves focus to the next focusable or tabbable element in the focus scope. */\n  focusNext(opts?: FocusManagerOptions): FocusableElement | null,\n  /** Moves focus to the previous focusable or tabbable element in the focus scope. */\n  focusPrevious(opts?: FocusManagerOptions): FocusableElement | null,\n  /** Moves focus to the first focusable or tabbable element in the focus scope. */\n  focusFirst(opts?: FocusManagerOptions): FocusableElement | null,\n    /** Moves focus to the last focusable or tabbable element in the focus scope. */\n  focusLast(opts?: FocusManagerOptions): FocusableElement | null\n}\n\ntype ScopeRef = RefObject<Element[] | null> | null;\ninterface IFocusContext {\n  focusManager: FocusManager,\n  parentNode: TreeNode | null\n}\n\nconst FocusContext = React.createContext<IFocusContext | null>(null);\nconst RESTORE_FOCUS_EVENT = 'react-aria-focus-scope-restore';\n\nlet activeScope: ScopeRef = null;\n\n// This is a hacky DOM-based implementation of a FocusScope until this RFC lands in React:\n// https://github.com/reactjs/rfcs/pull/109\n\n/**\n * A FocusScope manages focus for its descendants. It supports containing focus inside\n * the scope, restoring focus to the previously focused element on unmount, and auto\n * focusing children on mount. It also acts as a container for a programmatic focus\n * management interface that can be used to move focus forward and back in response\n * to user events.\n */\nexport function FocusScope(props: FocusScopeProps) {\n  let {children, contain, restoreFocus, autoFocus} = props;\n  let startRef = useRef<HTMLSpanElement>(null);\n  let endRef = useRef<HTMLSpanElement>(null);\n  let scopeRef = useRef<Element[]>([]);\n  let {parentNode} = useContext(FocusContext) || {};\n\n  // Create a tree node here so we can add children to it even before it is added to the tree.\n  let node = useMemo(() => new TreeNode({scopeRef}), [scopeRef]);\n\n  useLayoutEffect(() => {\n    // If a new scope mounts outside the active scope, (e.g. DialogContainer launched from a menu),\n    // use the active scope as the parent instead of the parent from context. Layout effects run bottom\n    // up, so if the parent is not yet added to the tree, don't do this. Only the outer-most FocusScope\n    // that is being added should get the activeScope as its parent.\n    let parent = parentNode || focusScopeTree.root;\n    if (focusScopeTree.getTreeNode(parent.scopeRef) && activeScope && !isAncestorScope(activeScope, parent.scopeRef)) {\n      let activeNode = focusScopeTree.getTreeNode(activeScope);\n      if (activeNode) {\n        parent = activeNode;\n      }\n    }\n\n    // Add the node to the parent, and to the tree.\n    parent.addChild(node);\n    focusScopeTree.addNode(node);\n  }, [node, parentNode]);\n\n  useLayoutEffect(() => {\n    let node = focusScopeTree.getTreeNode(scopeRef);\n    if (node) {\n      node.contain = !!contain;\n    }\n  }, [contain]);\n\n  useLayoutEffect(() => {\n    // Find all rendered nodes between the sentinels and add them to the scope.\n    let node = startRef.current?.nextSibling!;\n    let nodes: Element[] = [];\n    let stopPropagation = e => e.stopPropagation();\n    while (node && node !== endRef.current) {\n      nodes.push(node as Element);\n      // Stop custom restore focus event from propagating to parent focus scopes.\n      node.addEventListener(RESTORE_FOCUS_EVENT, stopPropagation);\n      node = node.nextSibling as Element;\n    }\n\n    scopeRef.current = nodes;\n\n    return () => {\n      for (let node of nodes) {\n        node.removeEventListener(RESTORE_FOCUS_EVENT, stopPropagation);\n      }\n    };\n  }, [children]);\n\n  useActiveScopeTracker(scopeRef, restoreFocus, contain);\n  useFocusContainment(scopeRef, contain);\n  useRestoreFocus(scopeRef, restoreFocus, contain);\n  useAutoFocus(scopeRef, autoFocus);\n\n  // This needs to be an effect so that activeScope is updated after the FocusScope tree is complete.\n  // It cannot be a useLayoutEffect because the parent of this node hasn't been attached in the tree yet.\n  useEffect(() => {\n    const activeElement = getOwnerDocument(scopeRef.current ? scopeRef.current[0] : undefined).activeElement;\n    let scope: TreeNode | null = null;\n\n    if (isElementInScope(activeElement, scopeRef.current)) {\n      // We need to traverse the focusScope tree and find the bottom most scope that\n      // contains the active element and set that as the activeScope.\n      for (let node of focusScopeTree.traverse()) {\n        if (node.scopeRef && isElementInScope(activeElement, node.scopeRef.current)) {\n          scope = node;\n        }\n      }\n\n      if (scope === focusScopeTree.getTreeNode(scopeRef)) {\n        activeScope = scope.scopeRef;\n      }\n    }\n  }, [scopeRef]);\n\n  // This layout effect cleanup is so that the tree node is removed synchronously with react before the RAF\n  // in useRestoreFocus cleanup runs.\n  useLayoutEffect(() => {\n    return () => {\n      // Scope may have been re-parented.\n      let parentScope = focusScopeTree.getTreeNode(scopeRef)?.parent?.scopeRef ?? null;\n\n      if (\n        (scopeRef === activeScope || isAncestorScope(scopeRef, activeScope)) &&\n        (!parentScope || focusScopeTree.getTreeNode(parentScope))\n      ) {\n        activeScope = parentScope;\n      }\n      focusScopeTree.removeTreeNode(scopeRef);\n    };\n  }, [scopeRef]);\n\n  let focusManager = useMemo(() => createFocusManagerForScope(scopeRef), []);\n  let value = useMemo(() => ({\n    focusManager,\n    parentNode: node\n  }), [node, focusManager]);\n\n  return (\n    <FocusContext.Provider value={value}>\n      <span data-focus-scope-start hidden ref={startRef} />\n      {children}\n      <span data-focus-scope-end hidden ref={endRef} />\n    </FocusContext.Provider>\n  );\n}\n\n/**\n * Returns a FocusManager interface for the parent FocusScope.\n * A FocusManager can be used to programmatically move focus within\n * a FocusScope, e.g. in response to user events like keyboard navigation.\n */\nexport function useFocusManager(): FocusManager | undefined {\n  return useContext(FocusContext)?.focusManager;\n}\n\nfunction createFocusManagerForScope(scopeRef: React.RefObject<Element[] | null>): FocusManager {\n  return {\n    focusNext(opts: FocusManagerOptions = {}) {\n      let scope = scopeRef.current!;\n      let {from, tabbable, wrap, accept} = opts;\n      let node = from || getOwnerDocument(scope[0]).activeElement!;\n      let sentinel = scope[0].previousElementSibling!;\n      let scopeRoot = getScopeRoot(scope);\n      let walker = getFocusableTreeWalker(scopeRoot, {tabbable, accept}, scope);\n      walker.currentNode = isElementInScope(node, scope) ? node : sentinel;\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (!nextNode && wrap) {\n        walker.currentNode = sentinel;\n        nextNode = walker.nextNode() as FocusableElement;\n      }\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusPrevious(opts: FocusManagerOptions = {}) {\n      let scope = scopeRef.current!;\n      let {from, tabbable, wrap, accept} = opts;\n      let node = from || getOwnerDocument(scope[0]).activeElement!;\n      let sentinel = scope[scope.length - 1].nextElementSibling!;\n      let scopeRoot = getScopeRoot(scope);\n      let walker = getFocusableTreeWalker(scopeRoot, {tabbable, accept}, scope);\n      walker.currentNode = isElementInScope(node, scope) ? node : sentinel;\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (!previousNode && wrap) {\n        walker.currentNode = sentinel;\n        previousNode = walker.previousNode() as FocusableElement;\n      }\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    },\n    focusFirst(opts = {}) {\n      let scope = scopeRef.current!;\n      let {tabbable, accept} = opts;\n      let scopeRoot = getScopeRoot(scope);\n      let walker = getFocusableTreeWalker(scopeRoot, {tabbable, accept}, scope);\n      walker.currentNode = scope[0].previousElementSibling!;\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusLast(opts = {}) {\n      let scope = scopeRef.current!;\n      let {tabbable, accept} = opts;\n      let scopeRoot = getScopeRoot(scope);\n      let walker = getFocusableTreeWalker(scopeRoot, {tabbable, accept}, scope);\n      walker.currentNode = scope[scope.length - 1].nextElementSibling!;\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    }\n  };\n}\n\nconst focusableElements = [\n  'input:not([disabled]):not([type=hidden])',\n  'select:not([disabled])',\n  'textarea:not([disabled])',\n  'button:not([disabled])',\n  'a[href]',\n  'area[href]',\n  'summary',\n  'iframe',\n  'object',\n  'embed',\n  'audio[controls]',\n  'video[controls]',\n  '[contenteditable]'\n];\n\nconst FOCUSABLE_ELEMENT_SELECTOR = focusableElements.join(':not([hidden]),') + ',[tabindex]:not([disabled]):not([hidden])';\n\nfocusableElements.push('[tabindex]:not([tabindex=\"-1\"]):not([disabled])');\nconst TABBABLE_ELEMENT_SELECTOR = focusableElements.join(':not([hidden]):not([tabindex=\"-1\"]),');\n\nexport function isFocusable(element: HTMLElement) {\n  return element.matches(FOCUSABLE_ELEMENT_SELECTOR);\n}\n\nfunction getScopeRoot(scope: Element[]) {\n  return scope[0].parentElement!;\n}\n\nfunction shouldContainFocus(scopeRef: ScopeRef) {\n  let scope = focusScopeTree.getTreeNode(activeScope);\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.contain) {\n      return false;\n    }\n\n    scope = scope.parent;\n  }\n\n  return true;\n}\n\nfunction useFocusContainment(scopeRef: RefObject<Element[] | null>, contain?: boolean) {\n  let focusedNode = useRef<FocusableElement>(undefined);\n\n  let raf = useRef<ReturnType<typeof requestAnimationFrame>>(undefined);\n  useLayoutEffect(() => {\n    let scope = scopeRef.current;\n    if (!contain) {\n      // if contain was changed, then we should cancel any ongoing waits to pull focus back into containment\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n        raf.current = undefined;\n      }\n      return;\n    }\n\n    const ownerDocument = getOwnerDocument(scope ? scope[0] : undefined);\n\n    // Handle the Tab key to contain focus within the scope\n    let onKeyDown = (e) => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || !shouldContainFocus(scopeRef) || e.isComposing) {\n        return;\n      }\n\n      let focusedElement = ownerDocument.activeElement;\n      let scope = scopeRef.current;\n      if (!scope || !isElementInScope(focusedElement, scope)) {\n        return;\n      }\n\n      let scopeRoot = getScopeRoot(scope);\n      let walker = getFocusableTreeWalker(scopeRoot, {tabbable: true}, scope);\n      if (!focusedElement) {\n        return;\n      }\n      walker.currentNode = focusedElement;\n      let nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n      if (!nextElement) {\n        walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling! : scope[0].previousElementSibling!;\n        nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n      }\n\n      e.preventDefault();\n      if (nextElement) {\n        focusElement(nextElement, true);\n      }\n    };\n\n    let onFocus = (e) => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if ((!activeScope || isAncestorScope(activeScope, scopeRef)) && isElementInScope(e.target, scopeRef.current)) {\n        activeScope = scopeRef;\n        focusedNode.current = e.target;\n      } else if (shouldContainFocus(scopeRef) && !isElementInChildScope(e.target, scopeRef)) {\n        // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),\n        // restore focus to the previously focused node or the first tabbable element in the active scope.\n        if (focusedNode.current) {\n          focusedNode.current.focus();\n        } else if (activeScope && activeScope.current) {\n          focusFirstInScope(activeScope.current);\n        }\n      } else if (shouldContainFocus(scopeRef)) {\n        focusedNode.current = e.target;\n      }\n    };\n\n    let onBlur = (e) => {\n      // Firefox doesn't shift focus back to the Dialog properly without this\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n      }\n      raf.current = requestAnimationFrame(() => {\n        // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe\n        if (ownerDocument.activeElement && shouldContainFocus(scopeRef) && !isElementInChildScope(ownerDocument.activeElement, scopeRef)) {\n          activeScope = scopeRef;\n          if (ownerDocument.body.contains(e.target)) {\n            focusedNode.current = e.target;\n            focusedNode.current?.focus();\n          } else if (activeScope.current) {\n            focusFirstInScope(activeScope.current);\n          }\n        }\n      });\n    };\n\n    ownerDocument.addEventListener('keydown', onKeyDown, false);\n    ownerDocument.addEventListener('focusin', onFocus, false);\n    scope?.forEach(element => element.addEventListener('focusin', onFocus, false));\n    scope?.forEach(element => element.addEventListener('focusout', onBlur, false));\n    return () => {\n      ownerDocument.removeEventListener('keydown', onKeyDown, false);\n      ownerDocument.removeEventListener('focusin', onFocus, false);\n      scope?.forEach(element => element.removeEventListener('focusin', onFocus, false));\n      scope?.forEach(element => element.removeEventListener('focusout', onBlur, false));\n    };\n  }, [scopeRef, contain]);\n\n  // This is a useLayoutEffect so it is guaranteed to run before our async synthetic blur\n  // eslint-disable-next-line arrow-body-style\n  useLayoutEffect(() => {\n    return () => {\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n      }\n    };\n  }, [raf]);\n}\n\nfunction isElementInAnyScope(element: Element) {\n  return isElementInChildScope(element);\n}\n\nfunction isElementInScope(element?: Element | null, scope?: Element[] | null) {\n  if (!element) {\n    return false;\n  }\n  if (!scope) {\n    return false;\n  }\n  return scope.some(node => node.contains(element));\n}\n\nfunction isElementInChildScope(element: Element, scope: ScopeRef = null) {\n  // If the element is within a top layer element (e.g. toasts), always allow moving focus there.\n  if (element instanceof Element && element.closest('[data-react-aria-top-layer]')) {\n    return true;\n  }\n\n  // node.contains in isElementInScope covers child scopes that are also DOM children,\n  // but does not cover child scopes in portals.\n  for (let {scopeRef: s} of focusScopeTree.traverse(focusScopeTree.getTreeNode(scope))) {\n    if (s && isElementInScope(element, s.current)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/** @private */\nexport function isElementInChildOfActiveScope(element: Element) {\n  return isElementInChildScope(element, activeScope);\n}\n\nfunction isAncestorScope(ancestor: ScopeRef, scope: ScopeRef) {\n  let parent = focusScopeTree.getTreeNode(scope)?.parent;\n  while (parent) {\n    if (parent.scopeRef === ancestor) {\n      return true;\n    }\n    parent = parent.parent;\n  }\n  return false;\n}\n\nfunction focusElement(element: FocusableElement | null, scroll = false) {\n  if (element != null && !scroll) {\n    try {\n      focusSafely(element);\n    } catch (err) {\n      // ignore\n    }\n  } else if (element != null) {\n    try {\n      element.focus();\n    } catch (err) {\n      // ignore\n    }\n  }\n}\n\nfunction getFirstInScope(scope: Element[], tabbable = true) {\n  let sentinel = scope[0].previousElementSibling!;\n  let scopeRoot = getScopeRoot(scope);\n  let walker = getFocusableTreeWalker(scopeRoot, {tabbable}, scope);\n  walker.currentNode = sentinel;\n  let nextNode = walker.nextNode();\n\n  // If the scope does not contain a tabbable element, use the first focusable element.\n  if (tabbable && !nextNode) {\n    scopeRoot = getScopeRoot(scope);\n    walker = getFocusableTreeWalker(scopeRoot, {tabbable: false}, scope);\n    walker.currentNode = sentinel;\n    nextNode = walker.nextNode();\n  }\n\n  return nextNode as FocusableElement;\n}\n\nfunction focusFirstInScope(scope: Element[], tabbable:boolean = true) {\n  focusElement(getFirstInScope(scope, tabbable));\n}\n\nfunction useAutoFocus(scopeRef: RefObject<Element[] | null>, autoFocus?: boolean) {\n  const autoFocusRef = React.useRef(autoFocus);\n  useEffect(() => {\n    if (autoFocusRef.current) {\n      activeScope = scopeRef;\n      const ownerDocument = getOwnerDocument(scopeRef.current ? scopeRef.current[0] : undefined);\n      if (!isElementInScope(ownerDocument.activeElement, activeScope.current) && scopeRef.current) {\n        focusFirstInScope(scopeRef.current);\n      }\n    }\n    autoFocusRef.current = false;\n  }, [scopeRef]);\n}\n\nfunction useActiveScopeTracker(scopeRef: RefObject<Element[] | null>, restore?: boolean, contain?: boolean) {\n  // tracks the active scope, in case restore and contain are both false.\n  // if either are true, this is tracked in useRestoreFocus or useFocusContainment.\n  useLayoutEffect(() => {\n    if (restore || contain) {\n      return;\n    }\n\n    let scope = scopeRef.current;\n    const ownerDocument = getOwnerDocument(scope ? scope[0] : undefined);\n\n    let onFocus = (e) => {\n      let target = e.target as Element;\n      if (isElementInScope(target, scopeRef.current)) {\n        activeScope = scopeRef;\n      } else if (!isElementInAnyScope(target)) {\n        activeScope = null;\n      }\n    };\n\n    ownerDocument.addEventListener('focusin', onFocus, false);\n    scope?.forEach(element => element.addEventListener('focusin', onFocus, false));\n    return () => {\n      ownerDocument.removeEventListener('focusin', onFocus, false);\n      scope?.forEach(element => element.removeEventListener('focusin', onFocus, false));\n    };\n  }, [scopeRef, restore, contain]);\n}\n\nfunction shouldRestoreFocus(scopeRef: ScopeRef) {\n  let scope = focusScopeTree.getTreeNode(activeScope);\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.nodeToRestore) {\n      return false;\n    }\n\n    scope = scope.parent;\n  }\n\n  return scope?.scopeRef === scopeRef;\n}\n\nfunction useRestoreFocus(scopeRef: RefObject<Element[] | null>, restoreFocus?: boolean, contain?: boolean) {\n  // create a ref during render instead of useLayoutEffect so the active element is saved before a child with autoFocus=true mounts.\n  // eslint-disable-next-line no-restricted-globals\n  const nodeToRestoreRef = useRef(typeof document !== 'undefined' ? getOwnerDocument(scopeRef.current ? scopeRef.current[0] : undefined).activeElement as FocusableElement : null);\n\n  // restoring scopes should all track if they are active regardless of contain, but contain already tracks it plus logic to contain the focus\n  // restoring-non-containing scopes should only care if they become active so they can perform the restore\n  useLayoutEffect(() => {\n    let scope = scopeRef.current;\n    const ownerDocument = getOwnerDocument(scope ? scope[0] : undefined);\n    if (!restoreFocus || contain) {\n      return;\n    }\n\n    let onFocus = () => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if ((!activeScope || isAncestorScope(activeScope, scopeRef)) &&\n      isElementInScope(ownerDocument.activeElement, scopeRef.current)\n      ) {\n        activeScope = scopeRef;\n      }\n    };\n\n    ownerDocument.addEventListener('focusin', onFocus, false);\n    scope?.forEach(element => element.addEventListener('focusin', onFocus, false));\n    return () => {\n      ownerDocument.removeEventListener('focusin', onFocus, false);\n      scope?.forEach(element => element.removeEventListener('focusin', onFocus, false));\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [scopeRef, contain]);\n\n  useLayoutEffect(() => {\n    const ownerDocument = getOwnerDocument(scopeRef.current ? scopeRef.current[0] : undefined);\n\n    if (!restoreFocus) {\n      return;\n    }\n\n    // Handle the Tab key so that tabbing out of the scope goes to the next element\n    // after the node that had focus when the scope mounted. This is important when\n    // using portals for overlays, so that focus goes to the expected element when\n    // tabbing out of the overlay.\n    let onKeyDown = (e: KeyboardEvent) => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || !shouldContainFocus(scopeRef) || e.isComposing) {\n        return;\n      }\n\n      let focusedElement = ownerDocument.activeElement as FocusableElement;\n      if (!isElementInScope(focusedElement, scopeRef.current)) {\n        return;\n      }\n      let treeNode = focusScopeTree.getTreeNode(scopeRef);\n      if (!treeNode) {\n        return;\n      }\n      let nodeToRestore = treeNode.nodeToRestore;\n\n      // Create a DOM tree walker that matches all tabbable elements\n      let walker = getFocusableTreeWalker(ownerDocument.body, {tabbable: true});\n\n      // Find the next tabbable element after the currently focused element\n      walker.currentNode = focusedElement;\n      let nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n\n      if (!nodeToRestore || !ownerDocument.body.contains(nodeToRestore) || nodeToRestore === ownerDocument.body) {\n        nodeToRestore = undefined;\n        treeNode.nodeToRestore = undefined;\n      }\n\n      // If there is no next element, or it is outside the current scope, move focus to the\n      // next element after the node to restore to instead.\n      if ((!nextElement || !isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {\n        walker.currentNode = nodeToRestore;\n\n        // Skip over elements within the scope, in case the scope immediately follows the node to restore.\n        do {\n          nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n        } while (isElementInScope(nextElement, scopeRef.current));\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (nextElement) {\n          focusElement(nextElement, true);\n        } else {\n           // If there is no next element and the nodeToRestore isn't within a FocusScope (i.e. we are leaving the top level focus scope)\n           // then move focus to the body.\n           // Otherwise restore focus to the nodeToRestore (e.g menu within a popover -> tabbing to close the menu should move focus to menu trigger)\n          if (!isElementInAnyScope(nodeToRestore)) {\n            focusedElement.blur();\n          } else {\n            focusElement(nodeToRestore, true);\n          }\n        }\n      }\n    };\n\n    if (!contain) {\n      ownerDocument.addEventListener('keydown', onKeyDown, true);\n    }\n\n    return () => {\n      if (!contain) {\n        ownerDocument.removeEventListener('keydown', onKeyDown, true);\n      }\n    };\n  }, [scopeRef, restoreFocus, contain]);\n\n  // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.\n  useLayoutEffect(() => {\n    const ownerDocument = getOwnerDocument(scopeRef.current ? scopeRef.current[0] : undefined);\n\n    if (!restoreFocus) {\n      return;\n    }\n\n    let treeNode = focusScopeTree.getTreeNode(scopeRef);\n    if (!treeNode) {\n      return;\n    }\n    treeNode.nodeToRestore = nodeToRestoreRef.current ?? undefined;\n    return () => {\n      let treeNode = focusScopeTree.getTreeNode(scopeRef);\n      if (!treeNode) {\n        return;\n      }\n      let nodeToRestore = treeNode.nodeToRestore;\n\n      // if we already lost focus to the body and this was the active scope, then we should attempt to restore\n      if (\n        restoreFocus\n        && nodeToRestore\n        && (\n          // eslint-disable-next-line react-hooks/exhaustive-deps\n          (isElementInScope(ownerDocument.activeElement, scopeRef.current) || (ownerDocument.activeElement === ownerDocument.body && shouldRestoreFocus(scopeRef)))\n        )\n      ) {\n        // freeze the focusScopeTree so it persists after the raf, otherwise during unmount nodes are removed from it\n        let clonedTree = focusScopeTree.clone();\n        requestAnimationFrame(() => {\n          // Only restore focus if we've lost focus to the body, the alternative is that focus has been purposefully moved elsewhere\n          if (ownerDocument.activeElement === ownerDocument.body) {\n            // look up the tree starting with our scope to find a nodeToRestore still in the DOM\n            let treeNode = clonedTree.getTreeNode(scopeRef);\n            while (treeNode) {\n              if (treeNode.nodeToRestore && treeNode.nodeToRestore.isConnected) {\n                restoreFocusToElement(treeNode.nodeToRestore);\n                return;\n              }\n              treeNode = treeNode.parent;\n            }\n\n            // If no nodeToRestore was found, focus the first element in the nearest\n            // ancestor scope that is still in the tree.\n            treeNode = clonedTree.getTreeNode(scopeRef);\n            while (treeNode) {\n              if (treeNode.scopeRef && treeNode.scopeRef.current && focusScopeTree.getTreeNode(treeNode.scopeRef)) {\n                let node = getFirstInScope(treeNode.scopeRef.current, true);\n                restoreFocusToElement(node);\n                return;\n              }\n              treeNode = treeNode.parent;\n            }\n          }\n        });\n      }\n    };\n  }, [scopeRef, restoreFocus]);\n}\n\nfunction restoreFocusToElement(node: FocusableElement) {\n  // Dispatch a custom event that parent elements can intercept to customize focus restoration.\n  // For example, virtualized collection components reuse DOM elements, so the original element\n  // might still exist in the DOM but representing a different item.\n  if (node.dispatchEvent(new CustomEvent(RESTORE_FOCUS_EVENT, {bubbles: true, cancelable: true}))) {\n    focusElement(node);\n  }\n}\n\n/**\n * Create a [TreeWalker]{@link https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker}\n * that matches all focusable/tabbable elements.\n */\nexport function getFocusableTreeWalker(root: Element, opts?: FocusManagerOptions, scope?: Element[]) {\n  let selector = opts?.tabbable ? TABBABLE_ELEMENT_SELECTOR : FOCUSABLE_ELEMENT_SELECTOR;\n  let walker = getOwnerDocument(root).createTreeWalker(\n    root,\n    NodeFilter.SHOW_ELEMENT,\n    {\n      acceptNode(node) {\n        // Skip nodes inside the starting node.\n        if (opts?.from?.contains(node)) {\n          return NodeFilter.FILTER_REJECT;\n        }\n\n        if ((node as Element).matches(selector)\n          && isElementVisible(node as Element)\n          && (!scope || isElementInScope(node as Element, scope))\n          && (!opts?.accept || opts.accept(node as Element))\n        ) {\n          return NodeFilter.FILTER_ACCEPT;\n        }\n\n        return NodeFilter.FILTER_SKIP;\n      }\n    }\n  );\n\n  if (opts?.from) {\n    walker.currentNode = opts.from;\n  }\n\n  return walker;\n}\n\n/**\n * Creates a FocusManager object that can be used to move focus within an element.\n */\nexport function createFocusManager(ref: RefObject<Element | null>, defaultOptions: FocusManagerOptions = {}): FocusManager {\n  return {\n    focusNext(opts: FocusManagerOptions = {}) {\n      let root = ref.current;\n      if (!root) {\n        return null;\n      }\n      let {from, tabbable = defaultOptions.tabbable, wrap = defaultOptions.wrap, accept = defaultOptions.accept} = opts;\n      let node = from || getOwnerDocument(root).activeElement;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      if (root.contains(node)) {\n        walker.currentNode = node!;\n      }\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (!nextNode && wrap) {\n        walker.currentNode = root;\n        nextNode = walker.nextNode() as FocusableElement;\n      }\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusPrevious(opts: FocusManagerOptions = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return null;\n      }\n      let {from, tabbable = defaultOptions.tabbable, wrap = defaultOptions.wrap, accept = defaultOptions.accept} = opts;\n      let node = from || getOwnerDocument(root).activeElement;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      if (root.contains(node)) {\n        walker.currentNode = node!;\n      } else {\n        let next = last(walker);\n        if (next) {\n          focusElement(next, true);\n        }\n        return next ?? null;\n      }\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (!previousNode && wrap) {\n        walker.currentNode = root;\n        let lastNode = last(walker);\n        if (!lastNode) {\n          // couldn't wrap\n          return null;\n        }\n        previousNode = lastNode;\n      }\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode ?? null;\n    },\n    focusFirst(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return null;\n      }\n      let {tabbable = defaultOptions.tabbable, accept = defaultOptions.accept} = opts;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusLast(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return null;\n      }\n      let {tabbable = defaultOptions.tabbable, accept = defaultOptions.accept} = opts;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      let next = last(walker);\n      if (next) {\n        focusElement(next, true);\n      }\n      return next ?? null;\n    }\n  };\n}\n\nfunction last(walker: TreeWalker) {\n  let next: FocusableElement | undefined = undefined;\n  let last: FocusableElement;\n  do {\n    last = walker.lastChild() as FocusableElement;\n    if (last) {\n      next = last;\n    }\n  } while (last);\n  return next;\n}\n\n\nclass Tree {\n  root: TreeNode;\n  private fastMap = new Map<ScopeRef, TreeNode>();\n\n  constructor() {\n    this.root = new TreeNode({scopeRef: null});\n    this.fastMap.set(null, this.root);\n  }\n\n  get size() {\n    return this.fastMap.size;\n  }\n\n  getTreeNode(data: ScopeRef) {\n    return this.fastMap.get(data);\n  }\n\n  addTreeNode(scopeRef: ScopeRef, parent: ScopeRef, nodeToRestore?: FocusableElement) {\n    let parentNode = this.fastMap.get(parent ?? null);\n    if (!parentNode) {\n      return;\n    }\n    let node = new TreeNode({scopeRef});\n    parentNode.addChild(node);\n    node.parent = parentNode;\n    this.fastMap.set(scopeRef, node);\n    if (nodeToRestore) {\n      node.nodeToRestore = nodeToRestore;\n    }\n  }\n\n  addNode(node: TreeNode) {\n    this.fastMap.set(node.scopeRef, node);\n  }\n\n  removeTreeNode(scopeRef: ScopeRef) {\n    // never remove the root\n    if (scopeRef === null) {\n      return;\n    }\n    let node = this.fastMap.get(scopeRef);\n    if (!node) {\n      return;\n    }\n    let parentNode = node.parent;\n    // when we remove a scope, check if any sibling scopes are trying to restore focus to something inside the scope we're removing\n    // if we are, then replace the siblings restore with the restore from the scope we're removing\n    for (let current of this.traverse()) {\n      if (\n        current !== node &&\n        node.nodeToRestore &&\n        current.nodeToRestore &&\n        node.scopeRef &&\n        node.scopeRef.current &&\n        isElementInScope(current.nodeToRestore, node.scopeRef.current)\n      ) {\n        current.nodeToRestore = node.nodeToRestore;\n      }\n    }\n    let children = node.children;\n    if (parentNode) {\n      parentNode.removeChild(node);\n      if (children.size > 0) {\n        children.forEach(child => parentNode && parentNode.addChild(child));\n      }\n    }\n\n    this.fastMap.delete(node.scopeRef);\n  }\n\n  // Pre Order Depth First\n  *traverse(node: TreeNode = this.root): Generator<TreeNode> {\n    if (node.scopeRef != null) {\n      yield node;\n    }\n    if (node.children.size > 0) {\n      for (let child of node.children) {\n        yield* this.traverse(child);\n      }\n    }\n  }\n\n  clone(): Tree {\n    let newTree = new Tree();\n    for (let node of this.traverse()) {\n      newTree.addTreeNode(node.scopeRef, node.parent?.scopeRef ?? null, node.nodeToRestore);\n    }\n    return newTree;\n  }\n}\n\nclass TreeNode {\n  public scopeRef: ScopeRef;\n  public nodeToRestore?: FocusableElement;\n  public parent?: TreeNode;\n  public children: Set<TreeNode> = new Set();\n  public contain = false;\n\n  constructor(props: {scopeRef: ScopeRef}) {\n    this.scopeRef = props.scopeRef;\n  }\n  addChild(node: TreeNode) {\n    this.children.add(node);\n    node.parent = this;\n  }\n  removeChild(node: TreeNode) {\n    this.children.delete(node);\n    node.parent = undefined;\n  }\n}\n\nexport let focusScopeTree = new Tree();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}